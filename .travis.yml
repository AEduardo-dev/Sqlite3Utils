language:           cpp
os:                 linux
dist:               focal

# Matrix for the different operating systems jobs
jobs:
  include:
      # Test both gcc and clang for the different distros of linux+
      # Focal
    - compiler:     gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-9
            - g++-9
            - cmake
            - sqlite3
      script:
        # Export CC and CXX to tell cmake which compiler to use
        - export CC=/usr/bin/gcc-9
        - export CXX=/usr/bin/g++-9
        # Check versions of gcc, g++ and cmake
        - gcc -v && g++ -v && cmake --version

      env:
        - MATRIX_EVAL="CC=gcc-9 && CXX=g++-9"

    # works on Trusty
    - compiler:     clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - cmake
            - sqlite3
      script:
        # Export CC and CXX to tell cmake which compiler to use
        - export CC=/usr/local/clang-7.0.0/bin
        - export CXX=/usr/local/clang++-7.0.0/bin
        # Check versions of gcc, g++ and cmake
        - clang -v && clang++ -v && cmake --version

      env:
        - MATRIX_EVAL="CC=clang-7.0.0 && CXX=clang++-7.0.0"
      # BIONIC
    - os:           linux
      dist:         bionic
      compiler:     gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-7
            - g++-7
            - cmake
            - sqlite3
      script:
        # Export CC and CXX to tell cmake which compiler to use
        - export CC=/usr/bin/gcc-7
        - export CXX=/usr/bin/g++-7
        # Check versions of gcc, g++ and cmake
        - gcc -v && g++ -v && cmake --version

      env:
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"

    # works on Trusty
    - os:           linux
      dist:         bionic
      compiler:     clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - cmake
            - sqlite3
      script:
        # Export CC and CXX to tell cmake which compiler to use
        - export CC=/usr/local/clang-7.0.0/bin
        - export CXX=/usr/local/clang++-7.0.0/bin
        # Check versions of gcc, g++ and cmake
        - clang -v && clang++ -v && cmake --version
      env:
        - MATRIX_EVAL="CC=clang-7.0.0 && CXX=clang++-7.0.0"

      # XENIAL
    - os:           linux
      dist:         xenial
      compiler:     gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-5
            - g++-5
            - cmake
            - sqlite3
      script:
        # Export CC and CXX to tell cmake which compiler to use
        - export CC=/usr/bin/gcc-5
        - export CXX=/usr/bin/g++-5
        # Check versions of gcc, g++ and cmake
        - gcc -v && g++ -v && cmake --version
      env:
        - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5"

    # works on Trusty
    - os:           linux
      dist:         xenial
      compiler:     clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - cmake
            - sqlite3
      script:
        # Export CC and CXX to tell cmake which compiler to use
        - export CC=/usr/local/clang-7.0.0/bin
        - export CXX=/usr/local/clang++-7.0.0/bin
        # Check versions of gcc, g++ and cmake
        - clang -v && clang++ -v && cmake --version

      env:
        - MATRIX_EVAL="CC=clang-7.0.0 && CXX=clang++-7.0.0"

    # - os:         windows

    # Test clang since gcc is usually not used in macos
    # - os:         osx
    #   compiler:   clang
    #   osx_image:  xcode12.2
    # - os:         osx
    #   compiler:   clang
    #   osx_image:  xcode12u
    # - os:         osx
    #   compiler:   clang
    #   osx_image:  xcode12
    # - os:         osx
    #   compiler:   clang
    #   osx_image:  xcode11.6
    # - os:         osx
    #   compiler:   clang
    #   osx_image:  xcode11.3
    # - os:         osx
    #   compiler:   clang
    #   osx_image:  xcode10.3
    # - os:         osx
    #   compiler:   clang
    #   osx_image:  xcode9.4
    - os:           osx
      osx_image:    xcode12
      compiler:     gcc
      addons:
        homebrew:
          packages:
            - gcc
            - cmake
            - sqlite3
      script:
        # Export CC and CXX to tell cmake which compiler to use
        - export CC=/usr/local/gcc-7.0.0/bin
        - export CXX=/usr/local/g++-7.0.0/bin
        # Check versions of gcc, g++ and cmake
        - clang -v && clang++ -v && cmake --version

      env:
        - MATRIX_EVAL="CC=gcc-7.0.0 && CXX=g++-7.0.0"

    - os: windows
      compiler: gcc
      before_install:
      - |-
          case $TRAVIS_OS_NAME in
            windows)
              [[ ! -f C:/tools/msys64/msys2_shell.cmd ]] && rm -rf C:/tools/msys64
              choco uninstall -y mingw
              choco upgrade --no-progress -y msys2
              export msys2='cmd //C RefreshEnv.cmd '
              export msys2+='& set MSYS=winsymlinks:nativestrict '
              export msys2+='& C:\\tools\\msys64\\msys2_shell.cmd -defterm -no-start'
              export mingw64="$msys2 -mingw64 -full-path -here -c "\"\$@"\" --"
              export msys2+=" -msys2 -c "\"\$@"\" --"
              $msys2 pacman --sync --noconfirm --needed mingw-w64-x86_64-toolchain
              ## Install more MSYS2 packages from https://packages.msys2.org/base here
              taskkill //IM gpg-agent.exe //F  # https://travis-ci.community/t/4967
              export PATH=/C/tools/msys64/mingw64/bin:$PATH
              export MAKE=mingw32-make  # so that Autotools can find it
              $msys2 pacman -S --noconfirm --needed git base-devel mingw-w64-x86_64-gcc
              ;;
          esac

      before_cache:
      - |-
          case $TRAVIS_OS_NAME in
            windows)
              # https://unix.stackexchange.com/a/137322/107554
              $msys2 pacman --sync --clean --noconfirm
              ;;
          esac

      script:
        # Download and install cmake with cmake
        # Download
        - curl https://github.com/Kitware/CMake/releases/download/v3.19.0/cmake-3.19.0.zip --output cmake.zip
        # Extract
        - 7z e cmake.zip
        # Get inside directory
        - cd cmake-3.19.0
        # Install cmake
        - ./bootstrap && make && sudo make install
        # Run your build commands next
        # Create dir for build files
        - cd ..
        - mkdir build && cd build/
        # Run cmake with dependencies installation flag
        - cmake -DINSTALL_DEPENDENCIES=ON ..
        # Then build the project
        - cmake --build .
        # Run the tests
        - ctest --progress --verbose
        # Then install the project
        - cmake --install .

cache:
    directories:
    - $HOME/AppData/Local/Temp/chocolatey
    - /C/tools/msys64




before_install:
    - eval "${MATRIX_EVAL}"


script:
    # Run your build commands next
    # Create dir for build files
    - mkdir build && cd build/
    # Run cmake default way
    - cmake ..
    # Then build the project
    - cmake --build .
    # Run the tests
    - ctest --progress --verbose
    # Then install the project
    - cmake --install .
